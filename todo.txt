Pop-up completion:
1) Typescript side - see what the 'GetSignatureHelpItems' shows, and how we can map it to a snippet
2) API side - add method to omnicompleter - 'GetFunctionCompletions'
3) Turn off 'preview mode' - we'll use the 'info' for other stuff
4) VIM side - add API like:
extropy#omnicomplete#openSnippetCompletion(snippetCompletionArgs)
snippetCompletionArgs = base
items = [
{ description: "Snippet description", contents: ["line 1", "line 2", etc]}
]

The method will call openCompleteMenu, with word: '', empty: 1, 'abbr': 'name', description': description, 'info': SomeSnippetIdentifier
Save into script-local buffer, like s:pendingSnippets = map<identifier, contents>
 5) Create extropy#snippet#expandSnippet(lines)


Other interesting things:
http://vi.stackexchange.com/questions/2116/is-cpovim-a-special-syntax
<C-y> - completes snippet
maparg, mapcheck - see mapping



1) Change omnifunc to a JS provider
2) Create a node (server) process to run in background 
3) Close node process when exiting
4) Create node client to proxy commands to server
5) Submit responses back using remote-expr

--Create simple omnicompleter (data example) that interops with javascript
Test case:
1) Create new buffer with enew
2) Set filetype='date'
3) Get omnicomplete from JS

IAutoCompleter {
    canHandleFile(fileName, fileType);
    onFileEntered(fileName, fileType);
    onFileClosed(fileName, fileType);
    getCompletionColumn(completionContext: ICompletionContext): number;
    getCompletionNames(completionContext: ICompletionContext);
}

ICompletionContext {
    fileFullPath: string;
    line: number;
    column: number;
    edits: string;
}


6) Intergration with TypeScript language service
--Standalone language service integration
https://github.com/Microsoft/TypeScript/wiki/Using-the-Language-Service-API
Full path from tsconfig.json -> map to language service instance

7) CSS autocomplete
https://github.com/adobe/brackets/blob/master/src/extensions/default/CSSCodeHints/CSSProperties.json
