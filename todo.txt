1) Set up custom port
2) Set up qflist API - use for 'find references" TS'
3) Command for debugging
4) Snippet integration - VSCode style


Function completion:
4) VIM side - add API like:
extropy#omnicomplete#openSnippetCompletion(snippetCompletionArgs)
snippetCompletionArgs = base
items = [
{ description: "Snippet description", contents: ["line 1", "line 2", etc]}
]

Test method:
inoremap <expr> $ extropy#omnicomplete#openCompletionMenu({'base': col('.'), 'line': line('.'), 'items': [{'kind': "snippet", 'abbr': "hi", 'empty': 1, 'info': 'secret info'}]})


The method will call openCompleteMenu, with word: '', empty: 1, 'abbr': 'name', description': description, 'info': SomeSnippetIdentifier
Save into script-local buffer, like s:pendingSnippets = map<identifier, contents>
 5) Create extropy#snippet#expandSnippet(lines)
[IN PROGRESS] - Added snippet.vim to handle this and prototyped - it works well with the omnicompelte

6) Finish hooking up in the TS code- how to pass the completions down?
-Need to get the types integrated - especially derived classes. How will that work?
-New SnippetCompletion, new WordCompletion


Pop-up completion:
1) Typescript side - see what the 'GetSignatureHelpItems' shows, and how we can map it to a snippet

Looks like this:
info: [vim-js-typescript-completion|35476]Signature help{"items":[{"isVariadic":true,"prefixDisplayParts":[{"text":"log","kind":"methodName"},{"text":"(","kind":"punctuation"}],"suffixDisplayParts":[{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"void","kind":"keyword"}],"separatorDisplayParts":[{"text":",","kind":"punctuation"},{"text":" ","kind":"space"}],"parameters":[{"name":"message","documentation":[],"displayParts":[{"text":"message","kind":"parameterName"},{"text":"?","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"any","kind":"keyword"}],"isOptional":true},{"name":"optionalParams","documentation":[],"displayParts":[{"text":"...","kind":"punctuation"},{"text":"optionalParams","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"any","kind":"keyword"},{"text":"[","kind":"punctuation"},{"text":"]","kind":"punctuation"}],"isOptional":false}],"documentation":[]}],"applicableSpan":{"start":{"line":32,"offset":21},"end":{"line":32,"offset":70}},"selectedItemIndex":0,"argumentIndex":0,"argumentCount":1}

Could do something like concactenate all the 'parameters', with the type = parameterName as the replaceable pieces

2) API side - add method to omnicompleter - 'GetFunctionCompletions'
[PROGRESS] - Is this actually needed? Why not just let the completer take a snippet completoin?

3) Turn off 'preview mode' - we'll use the 'info' for other stuff
[DONE] - Remove preview flag

Other interesting things:
http://vi.stackexchange.com/questions/2116/is-cpovim-a-special-syntax
<C-y> - completes snippet
maparg, mapcheck - see mapping



1) Change omnifunc to a JS provider
2) Create a node (server) process to run in background 
3) Close node process when exiting
4) Create node client to proxy commands to server
5) Submit responses back using remote-expr

--Create simple omnicompleter (data example) that interops with javascript
Test case:
1) Create new buffer with enew
2) Set filetype='date'
3) Get omnicomplete from JS

IAutoCompleter {
    canHandleFile(fileName, fileType);
    onFileEntered(fileName, fileType);
    onFileClosed(fileName, fileType);
    getCompletionColumn(completionContext: ICompletionContext): number;
    getCompletionNames(completionContext: ICompletionContext);
}

ICompletionContext {
    fileFullPath: string;
    line: number;
    column: number;
    edits: string;
}


6) Intergration with TypeScript language service
--Standalone language service integration
https://github.com/Microsoft/TypeScript/wiki/Using-the-Language-Service-API
Full path from tsconfig.json -> map to language service instance

7) CSS autocomplete
https://github.com/adobe/brackets/blob/master/src/extensions/default/CSSCodeHints/CSSProperties.json
